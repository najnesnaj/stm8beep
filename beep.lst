                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Jul 11 2014) (Linux)
                                      4 ; This file was generated Tue Apr 25 20:13:38 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module beep
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _segmentMap
                                     13 	.globl _main
                                     14 	.globl _SetDefaultValues
                                     15 	.globl _timer_isr
                                     16 	.globl _rt_one_second_increment
                                     17 	.globl _tm1637DisplayDecimal
                                     18 	.globl _tm1637Init
                                     19 	.globl _InitializeUART
                                     20 	.globl _print_byte_hex
                                     21 	.globl _print_UCHAR_hex
                                     22 	.globl _UARTPrintF
                                     23 	.globl _delay
                                     24 	.globl _InitializeSystemClock
                                     25 	.globl _delayTenMicro
                                     26 	.globl _numberOfValues
                                     27 	.globl __onOrOff
                                     28 	.globl __pulseLength
                                     29 	.globl _internteller
                                     30 	.globl _real_time
                                     31 	.globl _tm1637SetBrightness
                                     32 	.globl __tm1637Start
                                     33 	.globl __tm1637Stop
                                     34 	.globl __tm1637ReadResult
                                     35 	.globl __tm1637WriteByte
                                     36 	.globl __tm1637ClkHigh
                                     37 	.globl __tm1637ClkLow
                                     38 	.globl __tm1637DioHigh
                                     39 	.globl __tm1637DioLow
                                     40 ;--------------------------------------------------------
                                     41 ; ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area DATA
      000000                         44 _real_time::
      000000                         45 	.ds 8
      000008                         46 _internteller::
      000008                         47 	.ds 2
                                     48 ;--------------------------------------------------------
                                     49 ; ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area INITIALIZED
      000000                         52 __pulseLength::
      000000                         53 	.ds 14
      00000E                         54 __onOrOff::
      00000E                         55 	.ds 7
      000015                         56 _numberOfValues::
      000015                         57 	.ds 1
                                     58 ;--------------------------------------------------------
                                     59 ; Stack segment in internal ram 
                                     60 ;--------------------------------------------------------
                                     61 	.area	SSEG
      000000                         62 __start__stack:
      000000                         63 	.ds	1
                                     64 
                                     65 ;--------------------------------------------------------
                                     66 ; absolute external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area DABS (ABS)
                                     69 ;--------------------------------------------------------
                                     70 ; interrupt vector 
                                     71 ;--------------------------------------------------------
                                     72 	.area HOME
      000000                         73 __interrupt_vect:
      000000 82v00u00u00             74 	int s_GSINIT ;reset
      000004 82 00 00 00             75 	int 0x0000 ;trap
      000008 82 00 00 00             76 	int 0x0000 ;int0
      00000C 82 00 00 00             77 	int 0x0000 ;int1
      000010 82 00 00 00             78 	int 0x0000 ;int2
      000014 82 00 00 00             79 	int 0x0000 ;int3
      000018 82 00 00 00             80 	int 0x0000 ;int4
      00001C 82 00 00 00             81 	int 0x0000 ;int5
      000020 82v00u03u7E             82 	int _timer_isr ;int6
      000024 82 00 00 00             83 	int 0x0000 ;int7
      000028 82 00 00 00             84 	int 0x0000 ;int8
      00002C 82 00 00 00             85 	int 0x0000 ;int9
      000030 82 00 00 00             86 	int 0x0000 ;int10
      000034 82 00 00 00             87 	int 0x0000 ;int11
      000038 82 00 00 00             88 	int 0x0000 ;int12
      00003C 82 00 00 00             89 	int 0x0000 ;int13
      000040 82 00 00 00             90 	int 0x0000 ;int14
      000044 82 00 00 00             91 	int 0x0000 ;int15
      000048 82 00 00 00             92 	int 0x0000 ;int16
      00004C 82 00 00 00             93 	int 0x0000 ;int17
      000050 82 00 00 00             94 	int 0x0000 ;int18
      000054 82 00 00 00             95 	int 0x0000 ;int19
      000058 82 00 00 00             96 	int 0x0000 ;int20
      00005C 82 00 00 00             97 	int 0x0000 ;int21
      000060 82 00 00 00             98 	int 0x0000 ;int22
      000064 82 00 00 00             99 	int 0x0000 ;int23
      000068 82 00 00 00            100 	int 0x0000 ;int24
      00006C 82 00 00 00            101 	int 0x0000 ;int25
      000070 82 00 00 00            102 	int 0x0000 ;int26
      000074 82 00 00 00            103 	int 0x0000 ;int27
      000078 82 00 00 00            104 	int 0x0000 ;int28
      00007C 82 00 00 00            105 	int 0x0000 ;int29
                                    106 ;--------------------------------------------------------
                                    107 ; global & static initialisations
                                    108 ;--------------------------------------------------------
                                    109 	.area HOME
                                    110 	.area GSINIT
                                    111 	.area GSFINAL
                                    112 	.area GSINIT
      000000                        113 __sdcc_gs_init_startup:
      000000                        114 __sdcc_init_data:
                                    115 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  116 	ldw x, #l_DATA
      000003 27 07            [ 1]  117 	jreq	00002$
      000005                        118 00001$:
      000005 72 4FuFFuFF      [ 1]  119 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  120 	decw x
      00000A 26 F9            [ 1]  121 	jrne	00001$
      00000C                        122 00002$:
      00000C AEr00r00         [ 2]  123 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  124 	jreq	00004$
      000011                        125 00003$:
      000011 D6uFFuFF         [ 1]  126 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  127 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  128 	decw	x
      000018 26 F7            [ 1]  129 	jrne	00003$
      00001A                        130 00004$:
                                    131 ; stm8_genXINIT() end
                                    132 	.area GSFINAL
      000000 CCr00r80         [ 2]  133 	jp	__sdcc_program_startup
                                    134 ;--------------------------------------------------------
                                    135 ; Home
                                    136 ;--------------------------------------------------------
                                    137 	.area HOME
                                    138 	.area HOME
      000080                        139 __sdcc_program_startup:
      000080 CCr04r09         [ 2]  140 	jp	_main
                                    141 ;	return from main will return to caller
                                    142 ;--------------------------------------------------------
                                    143 ; code
                                    144 ;--------------------------------------------------------
                                    145 	.area CODE
                                    146 ;	beep.c: 27: void delayTenMicro (void) {
                                    147 ;	-----------------------------------------
                                    148 ;	 function delayTenMicro
                                    149 ;	-----------------------------------------
      000000                        150 _delayTenMicro:
                                    151 ;	beep.c: 29: for (a = 0; a < 50; ++a)
      000000 A6 32            [ 1]  152 	ld	a, #0x32
      000002                        153 00104$:
                                    154 ;	beep.c: 30: __asm__("nop");
      000002 9D               [ 1]  155 	nop
      000003 4A               [ 1]  156 	dec	a
                                    157 ;	beep.c: 29: for (a = 0; a < 50; ++a)
      000004 4D               [ 1]  158 	tnz	a
      000005 26 FB            [ 1]  159 	jrne	00104$
      000007 81               [ 4]  160 	ret
                                    161 ;	beep.c: 33: void InitializeSystemClock() {
                                    162 ;	-----------------------------------------
                                    163 ;	 function InitializeSystemClock
                                    164 ;	-----------------------------------------
      000008                        165 _InitializeSystemClock:
                                    166 ;	beep.c: 34: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      000008 AE 50 C0         [ 2]  167 	ldw	x, #0x50c0
      00000B 7F               [ 1]  168 	clr	(x)
                                    169 ;	beep.c: 35: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      00000C AE 50 C0         [ 2]  170 	ldw	x, #0x50c0
      00000F A6 01            [ 1]  171 	ld	a, #0x01
      000011 F7               [ 1]  172 	ld	(x), a
                                    173 ;	beep.c: 36: CLK_ECKR = 0;                       //  Disable the external clock.
      000012 AE 50 C1         [ 2]  174 	ldw	x, #0x50c1
      000015 7F               [ 1]  175 	clr	(x)
                                    176 ;	beep.c: 37: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      000016                        177 00101$:
      000016 AE 50 C0         [ 2]  178 	ldw	x, #0x50c0
      000019 F6               [ 1]  179 	ld	a, (x)
      00001A A5 02            [ 1]  180 	bcp	a, #0x02
      00001C 27 F8            [ 1]  181 	jreq	00101$
                                    182 ;	beep.c: 38: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      00001E AE 50 C6         [ 2]  183 	ldw	x, #0x50c6
      000021 7F               [ 1]  184 	clr	(x)
                                    185 ;	beep.c: 39: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      000022 AE 50 C7         [ 2]  186 	ldw	x, #0x50c7
      000025 A6 FF            [ 1]  187 	ld	a, #0xff
      000027 F7               [ 1]  188 	ld	(x), a
                                    189 ;	beep.c: 40: CLK_PCKENR2 = 0xff;                 //  Ditto.
      000028 AE 50 CA         [ 2]  190 	ldw	x, #0x50ca
      00002B A6 FF            [ 1]  191 	ld	a, #0xff
      00002D F7               [ 1]  192 	ld	(x), a
                                    193 ;	beep.c: 41: CLK_CCOR = 0;                       //  Turn off CCO.
      00002E AE 50 C9         [ 2]  194 	ldw	x, #0x50c9
      000031 7F               [ 1]  195 	clr	(x)
                                    196 ;	beep.c: 42: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      000032 AE 50 CC         [ 2]  197 	ldw	x, #0x50cc
      000035 7F               [ 1]  198 	clr	(x)
                                    199 ;	beep.c: 43: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      000036 AE 50 CD         [ 2]  200 	ldw	x, #0x50cd
      000039 7F               [ 1]  201 	clr	(x)
                                    202 ;	beep.c: 44: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      00003A AE 50 C4         [ 2]  203 	ldw	x, #0x50c4
      00003D A6 E1            [ 1]  204 	ld	a, #0xe1
      00003F F7               [ 1]  205 	ld	(x), a
                                    206 ;	beep.c: 45: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      000040 AE 50 C5         [ 2]  207 	ldw	x, #0x50c5
      000043 7F               [ 1]  208 	clr	(x)
                                    209 ;	beep.c: 46: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      000044 AE 50 C5         [ 2]  210 	ldw	x, #0x50c5
      000047 A6 02            [ 1]  211 	ld	a, #0x02
      000049 F7               [ 1]  212 	ld	(x), a
                                    213 ;	beep.c: 47: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      00004A                        214 00104$:
      00004A AE 50 C5         [ 2]  215 	ldw	x, #0x50c5
      00004D F6               [ 1]  216 	ld	a, (x)
      00004E 44               [ 1]  217 	srl	a
      00004F 25 F9            [ 1]  218 	jrc	00104$
      000051 81               [ 4]  219 	ret
                                    220 ;	beep.c: 49: void delay (int time_ms) {
                                    221 ;	-----------------------------------------
                                    222 ;	 function delay
                                    223 ;	-----------------------------------------
      000052                        224 _delay:
      000052 52 0A            [ 2]  225 	sub	sp, #10
                                    226 ;	beep.c: 51: for (x = 0; x < 1036*time_ms; ++x)
      000054 5F               [ 1]  227 	clrw	x
      000055 1F 03            [ 2]  228 	ldw	(0x03, sp), x
      000057 1F 01            [ 2]  229 	ldw	(0x01, sp), x
      000059 1E 0D            [ 2]  230 	ldw	x, (0x0d, sp)
      00005B 89               [ 2]  231 	pushw	x
      00005C 4B 0C            [ 1]  232 	push	#0x0c
      00005E 4B 04            [ 1]  233 	push	#0x04
      000060 CDr00r00         [ 4]  234 	call	__mulint
      000063 5B 04            [ 2]  235 	addw	sp, #4
      000065 1F 09            [ 2]  236 	ldw	(0x09, sp), x
      000067                        237 00103$:
      000067 16 09            [ 2]  238 	ldw	y, (0x09, sp)
      000069 17 07            [ 2]  239 	ldw	(0x07, sp), y
      00006B 7B 07            [ 1]  240 	ld	a, (0x07, sp)
      00006D 49               [ 1]  241 	rlc	a
      00006E 4F               [ 1]  242 	clr	a
      00006F A2 00            [ 1]  243 	sbc	a, #0x00
      000071 6B 06            [ 1]  244 	ld	(0x06, sp), a
      000073 6B 05            [ 1]  245 	ld	(0x05, sp), a
      000075 1E 03            [ 2]  246 	ldw	x, (0x03, sp)
      000077 13 07            [ 2]  247 	cpw	x, (0x07, sp)
      000079 7B 02            [ 1]  248 	ld	a, (0x02, sp)
      00007B 12 06            [ 1]  249 	sbc	a, (0x06, sp)
      00007D 7B 01            [ 1]  250 	ld	a, (0x01, sp)
      00007F 12 05            [ 1]  251 	sbc	a, (0x05, sp)
      000081 2E 17            [ 1]  252 	jrsge	00105$
                                    253 ;	beep.c: 52: __asm__("nop");
      000083 9D               [ 1]  254 	nop
                                    255 ;	beep.c: 51: for (x = 0; x < 1036*time_ms; ++x)
      000084 16 03            [ 2]  256 	ldw	y, (0x03, sp)
      000086 72 A9 00 01      [ 2]  257 	addw	y, #0x0001
      00008A 7B 02            [ 1]  258 	ld	a, (0x02, sp)
      00008C A9 00            [ 1]  259 	adc	a, #0x00
      00008E 97               [ 1]  260 	ld	xl, a
      00008F 7B 01            [ 1]  261 	ld	a, (0x01, sp)
      000091 A9 00            [ 1]  262 	adc	a, #0x00
      000093 95               [ 1]  263 	ld	xh, a
      000094 17 03            [ 2]  264 	ldw	(0x03, sp), y
      000096 1F 01            [ 2]  265 	ldw	(0x01, sp), x
      000098 20 CD            [ 2]  266 	jra	00103$
      00009A                        267 00105$:
      00009A 5B 0A            [ 2]  268 	addw	sp, #10
      00009C 81               [ 4]  269 	ret
                                    270 ;	beep.c: 55: void UARTPrintF (char *message) {
                                    271 ;	-----------------------------------------
                                    272 ;	 function UARTPrintF
                                    273 ;	-----------------------------------------
      00009D                        274 _UARTPrintF:
                                    275 ;	beep.c: 56: char *ch = message;
      00009D 16 03            [ 2]  276 	ldw	y, (0x03, sp)
                                    277 ;	beep.c: 57: while (*ch) {
      00009F                        278 00104$:
      00009F 90 F6            [ 1]  279 	ld	a, (y)
      0000A1 4D               [ 1]  280 	tnz	a
      0000A2 27 0F            [ 1]  281 	jreq	00107$
                                    282 ;	beep.c: 58: UART1_DR = (unsigned char) *ch;     //  Put the next character into the data transmission register.
      0000A4 AE 52 31         [ 2]  283 	ldw	x, #0x5231
      0000A7 F7               [ 1]  284 	ld	(x), a
                                    285 ;	beep.c: 59: while ((UART1_SR & SR_TXE) == 0);   //  Wait for transmission to complete.
      0000A8                        286 00101$:
      0000A8 AE 52 30         [ 2]  287 	ldw	x, #0x5230
      0000AB F6               [ 1]  288 	ld	a, (x)
      0000AC 48               [ 1]  289 	sll	a
      0000AD 24 F9            [ 1]  290 	jrnc	00101$
                                    291 ;	beep.c: 60: ch++;                               //  Grab the next character.
      0000AF 90 5C            [ 2]  292 	incw	y
      0000B1 20 EC            [ 2]  293 	jra	00104$
      0000B3                        294 00107$:
      0000B3 81               [ 4]  295 	ret
                                    296 ;	beep.c: 64: void print_UCHAR_hex (unsigned char buffer) {
                                    297 ;	-----------------------------------------
                                    298 ;	 function print_UCHAR_hex
                                    299 ;	-----------------------------------------
      0000B4                        300 _print_UCHAR_hex:
      0000B4 52 0C            [ 2]  301 	sub	sp, #12
                                    302 ;	beep.c: 67: a = (buffer >> 4);
      0000B6 7B 0F            [ 1]  303 	ld	a, (0x0f, sp)
      0000B8 4E               [ 1]  304 	swap	a
      0000B9 A4 0F            [ 1]  305 	and	a, #0x0f
      0000BB 5F               [ 1]  306 	clrw	x
      0000BC 97               [ 1]  307 	ld	xl, a
                                    308 ;	beep.c: 68: if (a > 9)
      0000BD A3 00 09         [ 2]  309 	cpw	x, #0x0009
      0000C0 2D 07            [ 1]  310 	jrsle	00102$
                                    311 ;	beep.c: 69: a = a + 'a' - 10;
      0000C2 1C 00 57         [ 2]  312 	addw	x, #0x0057
      0000C5 1F 03            [ 2]  313 	ldw	(0x03, sp), x
      0000C7 20 05            [ 2]  314 	jra	00103$
      0000C9                        315 00102$:
                                    316 ;	beep.c: 71: a += '0';
      0000C9 1C 00 30         [ 2]  317 	addw	x, #0x0030
      0000CC 1F 03            [ 2]  318 	ldw	(0x03, sp), x
      0000CE                        319 00103$:
                                    320 ;	beep.c: 72: b = buffer & 0x0f;
      0000CE 7B 0F            [ 1]  321 	ld	a, (0x0f, sp)
      0000D0 A4 0F            [ 1]  322 	and	a, #0x0f
      0000D2 5F               [ 1]  323 	clrw	x
      0000D3 97               [ 1]  324 	ld	xl, a
                                    325 ;	beep.c: 73: if (b > 9)
      0000D4 A3 00 09         [ 2]  326 	cpw	x, #0x0009
      0000D7 2D 07            [ 1]  327 	jrsle	00105$
                                    328 ;	beep.c: 74: b = b + 'a' - 10;
      0000D9 1C 00 57         [ 2]  329 	addw	x, #0x0057
      0000DC 1F 01            [ 2]  330 	ldw	(0x01, sp), x
      0000DE 20 05            [ 2]  331 	jra	00106$
      0000E0                        332 00105$:
                                    333 ;	beep.c: 76: b += '0';
      0000E0 1C 00 30         [ 2]  334 	addw	x, #0x0030
      0000E3 1F 01            [ 2]  335 	ldw	(0x01, sp), x
      0000E5                        336 00106$:
                                    337 ;	beep.c: 77: message[0] = a;
      0000E5 90 96            [ 1]  338 	ldw	y, sp
      0000E7 72 A9 00 05      [ 2]  339 	addw	y, #5
      0000EB 7B 04            [ 1]  340 	ld	a, (0x04, sp)
      0000ED 90 F7            [ 1]  341 	ld	(y), a
                                    342 ;	beep.c: 78: message[1] = b;
      0000EF 93               [ 1]  343 	ldw	x, y
      0000F0 5C               [ 2]  344 	incw	x
      0000F1 7B 02            [ 1]  345 	ld	a, (0x02, sp)
      0000F3 F7               [ 1]  346 	ld	(x), a
                                    347 ;	beep.c: 79: message[2] = 0;
      0000F4 93               [ 1]  348 	ldw	x, y
      0000F5 5C               [ 2]  349 	incw	x
      0000F6 5C               [ 2]  350 	incw	x
      0000F7 7F               [ 1]  351 	clr	(x)
                                    352 ;	beep.c: 80: UARTPrintF (message);
      0000F8 90 89            [ 2]  353 	pushw	y
      0000FA CDr00r9D         [ 4]  354 	call	_UARTPrintF
      0000FD 5B 02            [ 2]  355 	addw	sp, #2
      0000FF 5B 0C            [ 2]  356 	addw	sp, #12
      000101 81               [ 4]  357 	ret
                                    358 ;	beep.c: 88: void print_byte_hex (unsigned char buffer) {
                                    359 ;	-----------------------------------------
                                    360 ;	 function print_byte_hex
                                    361 ;	-----------------------------------------
      000102                        362 _print_byte_hex:
      000102 52 0C            [ 2]  363 	sub	sp, #12
                                    364 ;	beep.c: 91: a = (buffer >> 4);
      000104 7B 0F            [ 1]  365 	ld	a, (0x0f, sp)
      000106 4E               [ 1]  366 	swap	a
      000107 A4 0F            [ 1]  367 	and	a, #0x0f
      000109 5F               [ 1]  368 	clrw	x
      00010A 97               [ 1]  369 	ld	xl, a
                                    370 ;	beep.c: 92: if (a > 9)
      00010B A3 00 09         [ 2]  371 	cpw	x, #0x0009
      00010E 2D 07            [ 1]  372 	jrsle	00102$
                                    373 ;	beep.c: 93: a = a + 'a' - 10;
      000110 1C 00 57         [ 2]  374 	addw	x, #0x0057
      000113 1F 0B            [ 2]  375 	ldw	(0x0b, sp), x
      000115 20 05            [ 2]  376 	jra	00103$
      000117                        377 00102$:
                                    378 ;	beep.c: 95: a += '0'; 
      000117 1C 00 30         [ 2]  379 	addw	x, #0x0030
      00011A 1F 0B            [ 2]  380 	ldw	(0x0b, sp), x
      00011C                        381 00103$:
                                    382 ;	beep.c: 96: b = buffer & 0x0f;
      00011C 7B 0F            [ 1]  383 	ld	a, (0x0f, sp)
      00011E A4 0F            [ 1]  384 	and	a, #0x0f
      000120 5F               [ 1]  385 	clrw	x
      000121 97               [ 1]  386 	ld	xl, a
                                    387 ;	beep.c: 97: if (b > 9)
      000122 A3 00 09         [ 2]  388 	cpw	x, #0x0009
      000125 2D 07            [ 1]  389 	jrsle	00105$
                                    390 ;	beep.c: 98: b = b + 'a' - 10;
      000127 1C 00 57         [ 2]  391 	addw	x, #0x0057
      00012A 1F 09            [ 2]  392 	ldw	(0x09, sp), x
      00012C 20 05            [ 2]  393 	jra	00106$
      00012E                        394 00105$:
                                    395 ;	beep.c: 100: b += '0'; 
      00012E 1C 00 30         [ 2]  396 	addw	x, #0x0030
      000131 1F 09            [ 2]  397 	ldw	(0x09, sp), x
      000133                        398 00106$:
                                    399 ;	beep.c: 101: message[0] = a;
      000133 90 96            [ 1]  400 	ldw	y, sp
      000135 90 5C            [ 2]  401 	incw	y
      000137 7B 0C            [ 1]  402 	ld	a, (0x0c, sp)
      000139 90 F7            [ 1]  403 	ld	(y), a
                                    404 ;	beep.c: 102: message[1] = b;
      00013B 93               [ 1]  405 	ldw	x, y
      00013C 5C               [ 2]  406 	incw	x
      00013D 7B 0A            [ 1]  407 	ld	a, (0x0a, sp)
      00013F F7               [ 1]  408 	ld	(x), a
                                    409 ;	beep.c: 103: message[2] = 0;
      000140 93               [ 1]  410 	ldw	x, y
      000141 5C               [ 2]  411 	incw	x
      000142 5C               [ 2]  412 	incw	x
      000143 7F               [ 1]  413 	clr	(x)
                                    414 ;	beep.c: 104: UARTPrintF (message);
      000144 90 89            [ 2]  415 	pushw	y
      000146 CDr00r9D         [ 4]  416 	call	_UARTPrintF
      000149 5B 02            [ 2]  417 	addw	sp, #2
      00014B 5B 0C            [ 2]  418 	addw	sp, #12
      00014D 81               [ 4]  419 	ret
                                    420 ;	beep.c: 109: void InitializeUART() {
                                    421 ;	-----------------------------------------
                                    422 ;	 function InitializeUART
                                    423 ;	-----------------------------------------
      00014E                        424 _InitializeUART:
                                    425 ;	beep.c: 119: UART1_CR1 = 0;
      00014E AE 52 34         [ 2]  426 	ldw	x, #0x5234
      000151 7F               [ 1]  427 	clr	(x)
                                    428 ;	beep.c: 120: UART1_CR2 = 0;
      000152 AE 52 35         [ 2]  429 	ldw	x, #0x5235
      000155 7F               [ 1]  430 	clr	(x)
                                    431 ;	beep.c: 121: UART1_CR4 = 0;
      000156 AE 52 37         [ 2]  432 	ldw	x, #0x5237
      000159 7F               [ 1]  433 	clr	(x)
                                    434 ;	beep.c: 122: UART1_CR3 = 0;
      00015A AE 52 36         [ 2]  435 	ldw	x, #0x5236
      00015D 7F               [ 1]  436 	clr	(x)
                                    437 ;	beep.c: 123: UART1_CR5 = 0;
      00015E AE 52 38         [ 2]  438 	ldw	x, #0x5238
      000161 7F               [ 1]  439 	clr	(x)
                                    440 ;	beep.c: 124: UART1_GTR = 0;
      000162 AE 52 39         [ 2]  441 	ldw	x, #0x5239
      000165 7F               [ 1]  442 	clr	(x)
                                    443 ;	beep.c: 125: UART1_PSCR = 0;
      000166 AE 52 3A         [ 2]  444 	ldw	x, #0x523a
      000169 7F               [ 1]  445 	clr	(x)
                                    446 ;	beep.c: 129: UNSET (UART1_CR1, CR1_M);        //  8 Data bits.
      00016A AE 52 34         [ 2]  447 	ldw	x, #0x5234
      00016D F6               [ 1]  448 	ld	a, (x)
      00016E A4 EF            [ 1]  449 	and	a, #0xef
      000170 F7               [ 1]  450 	ld	(x), a
                                    451 ;	beep.c: 130: UNSET (UART1_CR1, CR1_PCEN);     //  Disable parity.
      000171 AE 52 34         [ 2]  452 	ldw	x, #0x5234
      000174 F6               [ 1]  453 	ld	a, (x)
      000175 A4 FB            [ 1]  454 	and	a, #0xfb
      000177 F7               [ 1]  455 	ld	(x), a
                                    456 ;	beep.c: 131: UNSET (UART1_CR3, CR3_STOPH);    //  1 stop bit.
      000178 AE 52 36         [ 2]  457 	ldw	x, #0x5236
      00017B F6               [ 1]  458 	ld	a, (x)
      00017C A4 DF            [ 1]  459 	and	a, #0xdf
      00017E F7               [ 1]  460 	ld	(x), a
                                    461 ;	beep.c: 132: UNSET (UART1_CR3, CR3_STOPL);    //  1 stop bit.
      00017F AE 52 36         [ 2]  462 	ldw	x, #0x5236
      000182 F6               [ 1]  463 	ld	a, (x)
      000183 A4 EF            [ 1]  464 	and	a, #0xef
      000185 F7               [ 1]  465 	ld	(x), a
                                    466 ;	beep.c: 133: UART1_BRR2 = 0x0a;      //  Set the baud rate registers to 115200 baud
      000186 AE 52 33         [ 2]  467 	ldw	x, #0x5233
      000189 A6 0A            [ 1]  468 	ld	a, #0x0a
      00018B F7               [ 1]  469 	ld	(x), a
                                    470 ;	beep.c: 134: UART1_BRR1 = 0x08;      //  based upon a 16 MHz system clock.
      00018C AE 52 32         [ 2]  471 	ldw	x, #0x5232
      00018F A6 08            [ 1]  472 	ld	a, #0x08
      000191 F7               [ 1]  473 	ld	(x), a
                                    474 ;	beep.c: 138: UNSET (UART1_CR2, CR2_TEN);      //  Disable transmit.
      000192 AE 52 35         [ 2]  475 	ldw	x, #0x5235
      000195 F6               [ 1]  476 	ld	a, (x)
      000196 A4 F7            [ 1]  477 	and	a, #0xf7
      000198 F7               [ 1]  478 	ld	(x), a
                                    479 ;	beep.c: 139: UNSET (UART1_CR2, CR2_REN);      //  Disable receive.
      000199 AE 52 35         [ 2]  480 	ldw	x, #0x5235
      00019C F6               [ 1]  481 	ld	a, (x)
      00019D A4 FB            [ 1]  482 	and	a, #0xfb
      00019F F7               [ 1]  483 	ld	(x), a
                                    484 ;	beep.c: 143: SET (UART1_CR3, CR3_CPOL);
      0001A0 AE 52 36         [ 2]  485 	ldw	x, #0x5236
      0001A3 F6               [ 1]  486 	ld	a, (x)
      0001A4 AA 04            [ 1]  487 	or	a, #0x04
      0001A6 F7               [ 1]  488 	ld	(x), a
                                    489 ;	beep.c: 144: SET (UART1_CR3, CR3_CPHA);
      0001A7 AE 52 36         [ 2]  490 	ldw	x, #0x5236
      0001AA F6               [ 1]  491 	ld	a, (x)
      0001AB AA 02            [ 1]  492 	or	a, #0x02
      0001AD F7               [ 1]  493 	ld	(x), a
                                    494 ;	beep.c: 145: SET (UART1_CR3, CR3_LBCL);
      0001AE 72 10 52 36      [ 1]  495 	bset	0x5236, #0
                                    496 ;	beep.c: 149: SET (UART1_CR2, CR2_TEN);
      0001B2 AE 52 35         [ 2]  497 	ldw	x, #0x5235
      0001B5 F6               [ 1]  498 	ld	a, (x)
      0001B6 AA 08            [ 1]  499 	or	a, #0x08
      0001B8 F7               [ 1]  500 	ld	(x), a
                                    501 ;	beep.c: 150: SET (UART1_CR2, CR2_REN);
      0001B9 AE 52 35         [ 2]  502 	ldw	x, #0x5235
      0001BC F6               [ 1]  503 	ld	a, (x)
      0001BD AA 04            [ 1]  504 	or	a, #0x04
      0001BF F7               [ 1]  505 	ld	(x), a
                                    506 ;	beep.c: 151: UART1_CR3 = CR3_CLKEN;
      0001C0 AE 52 36         [ 2]  507 	ldw	x, #0x5236
      0001C3 A6 08            [ 1]  508 	ld	a, #0x08
      0001C5 F7               [ 1]  509 	ld	(x), a
      0001C6 81               [ 4]  510 	ret
                                    511 ;	beep.c: 179: void tm1637Init(void)
                                    512 ;	-----------------------------------------
                                    513 ;	 function tm1637Init
                                    514 ;	-----------------------------------------
      0001C7                        515 _tm1637Init:
                                    516 ;	beep.c: 181: tm1637SetBrightness(8);
      0001C7 4B 08            [ 1]  517 	push	#0x08
      0001C9 CDr02r67         [ 4]  518 	call	_tm1637SetBrightness
      0001CC 84               [ 1]  519 	pop	a
      0001CD 81               [ 4]  520 	ret
                                    521 ;	beep.c: 186: void tm1637DisplayDecimal(u8 TT,unsigned int displaySeparator)
                                    522 ;	-----------------------------------------
                                    523 ;	 function tm1637DisplayDecimal
                                    524 ;	-----------------------------------------
      0001CE                        525 _tm1637DisplayDecimal:
      0001CE 52 0F            [ 2]  526 	sub	sp, #15
                                    527 ;	beep.c: 188: unsigned int v = TT ;
      0001D0 5F               [ 1]  528 	clrw	x
      0001D1 7B 12            [ 1]  529 	ld	a, (0x12, sp)
      0001D3 97               [ 1]  530 	ld	xl, a
      0001D4 1F 05            [ 2]  531 	ldw	(0x05, sp), x
                                    532 ;	beep.c: 194: for (ii = 0; ii < 4; ++ii) {
      0001D6 96               [ 1]  533 	ldw	x, sp
      0001D7 5C               [ 2]  534 	incw	x
      0001D8 1F 0E            [ 2]  535 	ldw	(0x0e, sp), x
      0001DA AEr05r87         [ 2]  536 	ldw	x, #_segmentMap+0
      0001DD 1F 0C            [ 2]  537 	ldw	(0x0c, sp), x
      0001DF 90 5F            [ 1]  538 	clrw	y
      0001E1                        539 00106$:
                                    540 ;	beep.c: 195: digitArr[ii] = segmentMap[v % 10];
      0001E1 93               [ 1]  541 	ldw	x, y
      0001E2 72 FB 0E         [ 2]  542 	addw	x, (0x0e, sp)
      0001E5 1F 0A            [ 2]  543 	ldw	(0x0a, sp), x
      0001E7 90 89            [ 2]  544 	pushw	y
      0001E9 1E 07            [ 2]  545 	ldw	x, (0x07, sp)
      0001EB 90 AE 00 0A      [ 2]  546 	ldw	y, #0x000a
      0001EF 65               [ 2]  547 	divw	x, y
      0001F0 93               [ 1]  548 	ldw	x, y
      0001F1 90 85            [ 2]  549 	popw	y
      0001F3 72 FB 0C         [ 2]  550 	addw	x, (0x0c, sp)
      0001F6 F6               [ 1]  551 	ld	a, (x)
      0001F7 1E 0A            [ 2]  552 	ldw	x, (0x0a, sp)
      0001F9 F7               [ 1]  553 	ld	(x), a
                                    554 ;	beep.c: 196: if (ii == 2 && displaySeparator) {
      0001FA 90 A3 00 02      [ 2]  555 	cpw	y, #0x0002
      0001FE 26 0C            [ 1]  556 	jrne	00102$
      000200 1E 13            [ 2]  557 	ldw	x, (0x13, sp)
      000202 27 08            [ 1]  558 	jreq	00102$
                                    559 ;	beep.c: 197: digitArr[ii] |= 1 << 7;
      000204 1E 0A            [ 2]  560 	ldw	x, (0x0a, sp)
      000206 F6               [ 1]  561 	ld	a, (x)
      000207 AA 80            [ 1]  562 	or	a, #0x80
      000209 1E 0A            [ 2]  563 	ldw	x, (0x0a, sp)
      00020B F7               [ 1]  564 	ld	(x), a
      00020C                        565 00102$:
                                    566 ;	beep.c: 199: v /= 10;
      00020C 90 89            [ 2]  567 	pushw	y
      00020E 1E 07            [ 2]  568 	ldw	x, (0x07, sp)
      000210 90 AE 00 0A      [ 2]  569 	ldw	y, #0x000a
      000214 65               [ 2]  570 	divw	x, y
      000215 90 85            [ 2]  571 	popw	y
      000217 1F 05            [ 2]  572 	ldw	(0x05, sp), x
                                    573 ;	beep.c: 194: for (ii = 0; ii < 4; ++ii) {
      000219 90 5C            [ 2]  574 	incw	y
      00021B 90 A3 00 04      [ 2]  575 	cpw	y, #0x0004
      00021F 25 C0            [ 1]  576 	jrc	00106$
                                    577 ;	beep.c: 202: _tm1637Start();
      000221 CDr02r79         [ 4]  578 	call	__tm1637Start
                                    579 ;	beep.c: 203: _tm1637WriteByte(0x40);
      000224 4B 40            [ 1]  580 	push	#0x40
      000226 CDr02rCD         [ 4]  581 	call	__tm1637WriteByte
      000229 84               [ 1]  582 	pop	a
                                    583 ;	beep.c: 204: _tm1637ReadResult();
      00022A CDr02rB2         [ 4]  584 	call	__tm1637ReadResult
                                    585 ;	beep.c: 205: _tm1637Stop();
      00022D CDr02r8B         [ 4]  586 	call	__tm1637Stop
                                    587 ;	beep.c: 207: _tm1637Start();
      000230 CDr02r79         [ 4]  588 	call	__tm1637Start
                                    589 ;	beep.c: 208: _tm1637WriteByte(0xc0);
      000233 4B C0            [ 1]  590 	push	#0xc0
      000235 CDr02rCD         [ 4]  591 	call	__tm1637WriteByte
      000238 84               [ 1]  592 	pop	a
                                    593 ;	beep.c: 209: _tm1637ReadResult();
      000239 CDr02rB2         [ 4]  594 	call	__tm1637ReadResult
                                    595 ;	beep.c: 211: for (ii = 0; ii < 4; ++ii) {
      00023C 5F               [ 1]  596 	clrw	x
      00023D 1F 07            [ 2]  597 	ldw	(0x07, sp), x
      00023F                        598 00108$:
                                    599 ;	beep.c: 212: _tm1637WriteByte(digitArr[3 - ii]);
      00023F 7B 08            [ 1]  600 	ld	a, (0x08, sp)
      000241 6B 09            [ 1]  601 	ld	(0x09, sp), a
      000243 A6 03            [ 1]  602 	ld	a, #0x03
      000245 10 09            [ 1]  603 	sub	a, (0x09, sp)
      000247 5F               [ 1]  604 	clrw	x
      000248 97               [ 1]  605 	ld	xl, a
      000249 72 FB 0E         [ 2]  606 	addw	x, (0x0e, sp)
      00024C F6               [ 1]  607 	ld	a, (x)
      00024D 88               [ 1]  608 	push	a
      00024E CDr02rCD         [ 4]  609 	call	__tm1637WriteByte
      000251 84               [ 1]  610 	pop	a
                                    611 ;	beep.c: 213: _tm1637ReadResult();
      000252 CDr02rB2         [ 4]  612 	call	__tm1637ReadResult
                                    613 ;	beep.c: 211: for (ii = 0; ii < 4; ++ii) {
      000255 1E 07            [ 2]  614 	ldw	x, (0x07, sp)
      000257 5C               [ 2]  615 	incw	x
      000258 1F 07            [ 2]  616 	ldw	(0x07, sp), x
      00025A 1E 07            [ 2]  617 	ldw	x, (0x07, sp)
      00025C A3 00 04         [ 2]  618 	cpw	x, #0x0004
      00025F 25 DE            [ 1]  619 	jrc	00108$
                                    620 ;	beep.c: 216: _tm1637Stop();
      000261 CDr02r8B         [ 4]  621 	call	__tm1637Stop
      000264 5B 0F            [ 2]  622 	addw	sp, #15
      000266 81               [ 4]  623 	ret
                                    624 ;	beep.c: 221: void tm1637SetBrightness(char brightness)
                                    625 ;	-----------------------------------------
                                    626 ;	 function tm1637SetBrightness
                                    627 ;	-----------------------------------------
      000267                        628 _tm1637SetBrightness:
                                    629 ;	beep.c: 228: _tm1637Start();
      000267 CDr02r79         [ 4]  630 	call	__tm1637Start
                                    631 ;	beep.c: 229: _tm1637WriteByte(0x87 + brightness);
      00026A 7B 03            [ 1]  632 	ld	a, (0x03, sp)
      00026C AB 87            [ 1]  633 	add	a, #0x87
      00026E 88               [ 1]  634 	push	a
      00026F CDr02rCD         [ 4]  635 	call	__tm1637WriteByte
      000272 84               [ 1]  636 	pop	a
                                    637 ;	beep.c: 230: _tm1637ReadResult();
      000273 CDr02rB2         [ 4]  638 	call	__tm1637ReadResult
                                    639 ;	beep.c: 231: _tm1637Stop();
      000276 CCr02r8B         [ 2]  640 	jp	__tm1637Stop
                                    641 ;	beep.c: 234: void _tm1637Start(void)
                                    642 ;	-----------------------------------------
                                    643 ;	 function _tm1637Start
                                    644 ;	-----------------------------------------
      000279                        645 __tm1637Start:
                                    646 ;	beep.c: 236: _tm1637ClkHigh();
      000279 CDr03r0B         [ 4]  647 	call	__tm1637ClkHigh
                                    648 ;	beep.c: 237: _tm1637DioHigh();
      00027C CDr03r1B         [ 4]  649 	call	__tm1637DioHigh
                                    650 ;	beep.c: 238: delay(5);
      00027F 4B 05            [ 1]  651 	push	#0x05
      000281 4B 00            [ 1]  652 	push	#0x00
      000283 CDr00r52         [ 4]  653 	call	_delay
      000286 5B 02            [ 2]  654 	addw	sp, #2
                                    655 ;	beep.c: 239: _tm1637DioLow();
      000288 CCr03r23         [ 2]  656 	jp	__tm1637DioLow
                                    657 ;	beep.c: 242: void _tm1637Stop(void)
                                    658 ;	-----------------------------------------
                                    659 ;	 function _tm1637Stop
                                    660 ;	-----------------------------------------
      00028B                        661 __tm1637Stop:
                                    662 ;	beep.c: 244: _tm1637ClkLow();
      00028B CDr03r13         [ 4]  663 	call	__tm1637ClkLow
                                    664 ;	beep.c: 245: delay(5);
      00028E 4B 05            [ 1]  665 	push	#0x05
      000290 4B 00            [ 1]  666 	push	#0x00
      000292 CDr00r52         [ 4]  667 	call	_delay
      000295 5B 02            [ 2]  668 	addw	sp, #2
                                    669 ;	beep.c: 246: _tm1637DioLow();
      000297 CDr03r23         [ 4]  670 	call	__tm1637DioLow
                                    671 ;	beep.c: 247: delay(5);
      00029A 4B 05            [ 1]  672 	push	#0x05
      00029C 4B 00            [ 1]  673 	push	#0x00
      00029E CDr00r52         [ 4]  674 	call	_delay
      0002A1 5B 02            [ 2]  675 	addw	sp, #2
                                    676 ;	beep.c: 248: _tm1637ClkHigh();
      0002A3 CDr03r0B         [ 4]  677 	call	__tm1637ClkHigh
                                    678 ;	beep.c: 249: delay(5);
      0002A6 4B 05            [ 1]  679 	push	#0x05
      0002A8 4B 00            [ 1]  680 	push	#0x00
      0002AA CDr00r52         [ 4]  681 	call	_delay
      0002AD 5B 02            [ 2]  682 	addw	sp, #2
                                    683 ;	beep.c: 250: _tm1637DioHigh();
      0002AF CCr03r1B         [ 2]  684 	jp	__tm1637DioHigh
                                    685 ;	beep.c: 253: void _tm1637ReadResult(void)
                                    686 ;	-----------------------------------------
                                    687 ;	 function _tm1637ReadResult
                                    688 ;	-----------------------------------------
      0002B2                        689 __tm1637ReadResult:
                                    690 ;	beep.c: 255: _tm1637ClkLow();
      0002B2 CDr03r13         [ 4]  691 	call	__tm1637ClkLow
                                    692 ;	beep.c: 256: delay(5);
      0002B5 4B 05            [ 1]  693 	push	#0x05
      0002B7 4B 00            [ 1]  694 	push	#0x00
      0002B9 CDr00r52         [ 4]  695 	call	_delay
      0002BC 5B 02            [ 2]  696 	addw	sp, #2
                                    697 ;	beep.c: 258: _tm1637ClkHigh();
      0002BE CDr03r0B         [ 4]  698 	call	__tm1637ClkHigh
                                    699 ;	beep.c: 259: delay(5);
      0002C1 4B 05            [ 1]  700 	push	#0x05
      0002C3 4B 00            [ 1]  701 	push	#0x00
      0002C5 CDr00r52         [ 4]  702 	call	_delay
      0002C8 5B 02            [ 2]  703 	addw	sp, #2
                                    704 ;	beep.c: 260: _tm1637ClkLow();
      0002CA CCr03r13         [ 2]  705 	jp	__tm1637ClkLow
                                    706 ;	beep.c: 263: void _tm1637WriteByte(unsigned char b)
                                    707 ;	-----------------------------------------
                                    708 ;	 function _tm1637WriteByte
                                    709 ;	-----------------------------------------
      0002CD                        710 __tm1637WriteByte:
      0002CD 52 02            [ 2]  711 	sub	sp, #2
                                    712 ;	beep.c: 265: for (ii = 0; ii < 8; ++ii) {
      0002CF 5F               [ 1]  713 	clrw	x
      0002D0 1F 01            [ 2]  714 	ldw	(0x01, sp), x
      0002D2                        715 00105$:
                                    716 ;	beep.c: 266: _tm1637ClkLow();
      0002D2 CDr03r13         [ 4]  717 	call	__tm1637ClkLow
                                    718 ;	beep.c: 267: if (b & 0x01) {
      0002D5 7B 05            [ 1]  719 	ld	a, (0x05, sp)
      0002D7 44               [ 1]  720 	srl	a
      0002D8 24 05            [ 1]  721 	jrnc	00102$
                                    722 ;	beep.c: 268: _tm1637DioHigh();
      0002DA CDr03r1B         [ 4]  723 	call	__tm1637DioHigh
      0002DD 20 03            [ 2]  724 	jra	00103$
      0002DF                        725 00102$:
                                    726 ;	beep.c: 271: _tm1637DioLow();
      0002DF CDr03r23         [ 4]  727 	call	__tm1637DioLow
      0002E2                        728 00103$:
                                    729 ;	beep.c: 273: delay(15);
      0002E2 4B 0F            [ 1]  730 	push	#0x0f
      0002E4 4B 00            [ 1]  731 	push	#0x00
      0002E6 CDr00r52         [ 4]  732 	call	_delay
      0002E9 5B 02            [ 2]  733 	addw	sp, #2
                                    734 ;	beep.c: 274: b >>= 1;
      0002EB 7B 05            [ 1]  735 	ld	a, (0x05, sp)
      0002ED 44               [ 1]  736 	srl	a
      0002EE 6B 05            [ 1]  737 	ld	(0x05, sp), a
                                    738 ;	beep.c: 275: _tm1637ClkHigh();
      0002F0 CDr03r0B         [ 4]  739 	call	__tm1637ClkHigh
                                    740 ;	beep.c: 276: delay(15);
      0002F3 4B 0F            [ 1]  741 	push	#0x0f
      0002F5 4B 00            [ 1]  742 	push	#0x00
      0002F7 CDr00r52         [ 4]  743 	call	_delay
      0002FA 5B 02            [ 2]  744 	addw	sp, #2
                                    745 ;	beep.c: 265: for (ii = 0; ii < 8; ++ii) {
      0002FC 1E 01            [ 2]  746 	ldw	x, (0x01, sp)
      0002FE 5C               [ 2]  747 	incw	x
      0002FF 1F 01            [ 2]  748 	ldw	(0x01, sp), x
      000301 1E 01            [ 2]  749 	ldw	x, (0x01, sp)
      000303 A3 00 08         [ 2]  750 	cpw	x, #0x0008
      000306 2F CA            [ 1]  751 	jrslt	00105$
      000308 5B 02            [ 2]  752 	addw	sp, #2
      00030A 81               [ 4]  753 	ret
                                    754 ;	beep.c: 282: void _tm1637ClkHigh(void)
                                    755 ;	-----------------------------------------
                                    756 ;	 function _tm1637ClkHigh
                                    757 ;	-----------------------------------------
      00030B                        758 __tm1637ClkHigh:
                                    759 ;	beep.c: 287: PD_ODR |= 1 << 2;
      00030B AE 50 0F         [ 2]  760 	ldw	x, #0x500f
      00030E F6               [ 1]  761 	ld	a, (x)
      00030F AA 04            [ 1]  762 	or	a, #0x04
      000311 F7               [ 1]  763 	ld	(x), a
      000312 81               [ 4]  764 	ret
                                    765 ;	beep.c: 290: void _tm1637ClkLow(void)
                                    766 ;	-----------------------------------------
                                    767 ;	 function _tm1637ClkLow
                                    768 ;	-----------------------------------------
      000313                        769 __tm1637ClkLow:
                                    770 ;	beep.c: 294: PD_ODR &= ~(1 << 2);
      000313 AE 50 0F         [ 2]  771 	ldw	x, #0x500f
      000316 F6               [ 1]  772 	ld	a, (x)
      000317 A4 FB            [ 1]  773 	and	a, #0xfb
      000319 F7               [ 1]  774 	ld	(x), a
      00031A 81               [ 4]  775 	ret
                                    776 ;	beep.c: 300: void _tm1637DioHigh(void)
                                    777 ;	-----------------------------------------
                                    778 ;	 function _tm1637DioHigh
                                    779 ;	-----------------------------------------
      00031B                        780 __tm1637DioHigh:
                                    781 ;	beep.c: 304: PD_ODR |= 1 << 3;
      00031B AE 50 0F         [ 2]  782 	ldw	x, #0x500f
      00031E F6               [ 1]  783 	ld	a, (x)
      00031F AA 08            [ 1]  784 	or	a, #0x08
      000321 F7               [ 1]  785 	ld	(x), a
      000322 81               [ 4]  786 	ret
                                    787 ;	beep.c: 308: void _tm1637DioLow(void)
                                    788 ;	-----------------------------------------
                                    789 ;	 function _tm1637DioLow
                                    790 ;	-----------------------------------------
      000323                        791 __tm1637DioLow:
                                    792 ;	beep.c: 310: PD_ODR &= ~(1 << 3);
      000323 AE 50 0F         [ 2]  793 	ldw	x, #0x500f
      000326 F6               [ 1]  794 	ld	a, (x)
      000327 A4 F7            [ 1]  795 	and	a, #0xf7
      000329 F7               [ 1]  796 	ld	(x), a
      00032A 81               [ 4]  797 	ret
                                    798 ;	beep.c: 325: void rt_one_second_increment (st_time *t) {
                                    799 ;	-----------------------------------------
                                    800 ;	 function rt_one_second_increment
                                    801 ;	-----------------------------------------
      00032B                        802 _rt_one_second_increment:
      00032B 52 08            [ 2]  803 	sub	sp, #8
                                    804 ;	beep.c: 326: ++t->ticker; //   
      00032D 16 0B            [ 2]  805 	ldw	y, (0x0b, sp)
      00032F 17 01            [ 2]  806 	ldw	(0x01, sp), y
      000331 1E 01            [ 2]  807 	ldw	x, (0x01, sp)
      000333 1C 00 04         [ 2]  808 	addw	x, #0x0004
      000336 1F 03            [ 2]  809 	ldw	(0x03, sp), x
      000338 1E 03            [ 2]  810 	ldw	x, (0x03, sp)
      00033A E6 03            [ 1]  811 	ld	a, (0x3, x)
      00033C 90 97            [ 1]  812 	ld	yl, a
      00033E E6 02            [ 1]  813 	ld	a, (0x2, x)
      000340 FE               [ 2]  814 	ldw	x, (x)
      000341 90 95            [ 1]  815 	ld	yh, a
      000343 72 A9 00 01      [ 2]  816 	addw	y, #0x0001
      000347 9F               [ 1]  817 	ld	a, xl
      000348 A9 00            [ 1]  818 	adc	a, #0x00
      00034A 6B 06            [ 1]  819 	ld	(0x06, sp), a
      00034C 9E               [ 1]  820 	ld	a, xh
      00034D A9 00            [ 1]  821 	adc	a, #0x00
      00034F 6B 05            [ 1]  822 	ld	(0x05, sp), a
      000351 1E 03            [ 2]  823 	ldw	x, (0x03, sp)
      000353 EF 02            [ 2]  824 	ldw	(0x2, x), y
      000355 16 05            [ 2]  825 	ldw	y, (0x05, sp)
      000357 FF               [ 2]  826 	ldw	(x), y
                                    827 ;	beep.c: 327: if(++t->second > 59) {
      000358 1E 01            [ 2]  828 	ldw	x, (0x01, sp)
      00035A F6               [ 1]  829 	ld	a, (x)
      00035B 4C               [ 1]  830 	inc	a
      00035C F7               [ 1]  831 	ld	(x), a
      00035D A1 3B            [ 1]  832 	cp	a, #0x3b
      00035F 23 1A            [ 2]  833 	jrule	00107$
                                    834 ;	beep.c: 328: t->second= 0;
      000361 1E 01            [ 2]  835 	ldw	x, (0x01, sp)
      000363 7F               [ 1]  836 	clr	(x)
                                    837 ;	beep.c: 329: if(++t->minute > 59) {
      000364 1E 01            [ 2]  838 	ldw	x, (0x01, sp)
      000366 5C               [ 2]  839 	incw	x
      000367 F6               [ 1]  840 	ld	a, (x)
      000368 4C               [ 1]  841 	inc	a
      000369 F7               [ 1]  842 	ld	(x), a
      00036A A1 3B            [ 1]  843 	cp	a, #0x3b
      00036C 23 0D            [ 2]  844 	jrule	00107$
                                    845 ;	beep.c: 330: t->minute= 0;
      00036E 7F               [ 1]  846 	clr	(x)
                                    847 ;	beep.c: 331: if(++t->hour > 23) {
      00036F 1E 01            [ 2]  848 	ldw	x, (0x01, sp)
      000371 5C               [ 2]  849 	incw	x
      000372 5C               [ 2]  850 	incw	x
      000373 F6               [ 1]  851 	ld	a, (x)
      000374 4C               [ 1]  852 	inc	a
      000375 F7               [ 1]  853 	ld	(x), a
      000376 A1 17            [ 1]  854 	cp	a, #0x17
      000378 23 01            [ 2]  855 	jrule	00107$
                                    856 ;	beep.c: 332: t->hour= 0;
      00037A 7F               [ 1]  857 	clr	(x)
      00037B                        858 00107$:
      00037B 5B 08            [ 2]  859 	addw	sp, #8
      00037D 81               [ 4]  860 	ret
                                    861 ;	beep.c: 342: void timer_isr(void) __interrupt(BEEP_ISR) {
                                    862 ;	-----------------------------------------
                                    863 ;	 function timer_isr
                                    864 ;	-----------------------------------------
      00037E                        865 _timer_isr:
                                    866 ;	beep.c: 343: if (++internteller > 500) {
      00037E CEu00u08         [ 2]  867 	ldw	x, _internteller+0
      000381 5C               [ 2]  868 	incw	x
      000382 CFu00u08         [ 2]  869 	ldw	_internteller+0, x
      000385 A3 01 F4         [ 2]  870 	cpw	x, #0x01f4
      000388 23 11            [ 2]  871 	jrule	00103$
                                    872 ;	beep.c: 344: internteller=0;
      00038A 72 5Fu00u09      [ 1]  873 	clr	_internteller+1
      00038E 72 5Fu00u08      [ 1]  874 	clr	_internteller+0
                                    875 ;	beep.c: 345: rt_one_second_increment(&real_time);
      000392 AEr00r00         [ 2]  876 	ldw	x, #_real_time+0
      000395 89               [ 2]  877 	pushw	x
      000396 CDr03r2B         [ 4]  878 	call	_rt_one_second_increment
      000399 5B 02            [ 2]  879 	addw	sp, #2
      00039B                        880 00103$:
      00039B 80               [11]  881 	iret
                                    882 ;	beep.c: 396: void SetDefaultValues()
                                    883 ;	-----------------------------------------
                                    884 ;	 function SetDefaultValues
                                    885 ;	-----------------------------------------
      00039C                        886 _SetDefaultValues:
      00039C 52 0E            [ 2]  887 	sub	sp, #14
                                    888 ;	beep.c: 403: FLASH_DUKR = FLASH_DUKR_KEY1;
      00039E AE 50 64         [ 2]  889 	ldw	x, #0x5064
      0003A1 A6 AE            [ 1]  890 	ld	a, #0xae
      0003A3 F7               [ 1]  891 	ld	(x), a
                                    892 ;	beep.c: 404: FLASH_DUKR = FLASH_DUKR_KEY2;
      0003A4 AE 50 64         [ 2]  893 	ldw	x, #0x5064
      0003A7 A6 56            [ 1]  894 	ld	a, #0x56
      0003A9 F7               [ 1]  895 	ld	(x), a
                                    896 ;	beep.c: 413: *addrss++ = (char) numberOfValues;
      0003AA AE 40 00         [ 2]  897 	ldw	x, #0x4000
      0003AD C6u00u15         [ 1]  898 	ld	a, _numberOfValues+0
      0003B0 F7               [ 1]  899 	ld	(x), a
      0003B1 AE 40 01         [ 2]  900 	ldw	x, #0x4001
      0003B4 1F 03            [ 2]  901 	ldw	(0x03, sp), x
                                    902 ;	beep.c: 414: for (index = 0; index < numberOfValues; index++)
      0003B6 AEr00r00         [ 2]  903 	ldw	x, #__pulseLength+0
      0003B9 1F 09            [ 2]  904 	ldw	(0x09, sp), x
      0003BB AEr00r0E         [ 2]  905 	ldw	x, #__onOrOff+0
      0003BE 1F 0D            [ 2]  906 	ldw	(0x0d, sp), x
      0003C0 5F               [ 1]  907 	clrw	x
      0003C1 1F 01            [ 2]  908 	ldw	(0x01, sp), x
      0003C3                        909 00103$:
      0003C3 C6u00u15         [ 1]  910 	ld	a, _numberOfValues+0
      0003C6 6B 06            [ 1]  911 	ld	(0x06, sp), a
      0003C8 7B 06            [ 1]  912 	ld	a, (0x06, sp)
      0003CA 49               [ 1]  913 	rlc	a
      0003CB 4F               [ 1]  914 	clr	a
      0003CC A2 00            [ 1]  915 	sbc	a, #0x00
      0003CE 6B 05            [ 1]  916 	ld	(0x05, sp), a
      0003D0 1E 01            [ 2]  917 	ldw	x, (0x01, sp)
      0003D2 13 05            [ 2]  918 	cpw	x, (0x05, sp)
      0003D4 2E 30            [ 1]  919 	jrsge	00105$
                                    920 ;	beep.c: 416: *addrss++ = (char) (_pulseLength[index] & 0xff);
      0003D6 16 01            [ 2]  921 	ldw	y, (0x01, sp)
      0003D8 90 58            [ 2]  922 	sllw	y
      0003DA 72 F9 09         [ 2]  923 	addw	y, (0x09, sp)
      0003DD 93               [ 1]  924 	ldw	x, y
      0003DE FE               [ 2]  925 	ldw	x, (x)
      0003DF 4F               [ 1]  926 	clr	a
      0003E0 95               [ 1]  927 	ld	xh, a
      0003E1 9F               [ 1]  928 	ld	a, xl
      0003E2 1E 03            [ 2]  929 	ldw	x, (0x03, sp)
      0003E4 F7               [ 1]  930 	ld	(x), a
      0003E5 1E 03            [ 2]  931 	ldw	x, (0x03, sp)
      0003E7 5C               [ 2]  932 	incw	x
                                    933 ;	beep.c: 417: *addrss++ = (char) ((_pulseLength[index] >> 8) & 0xff);
      0003E8 90 FE            [ 2]  934 	ldw	y, (y)
      0003EA 90 9E            [ 1]  935 	ld	a, yh
      0003EC 0F 07            [ 1]  936 	clr	(0x07, sp)
      0003EE 88               [ 1]  937 	push	a
      0003EF 0F 0C            [ 1]  938 	clr	(0x0c, sp)
      0003F1 84               [ 1]  939 	pop	a
      0003F2 F7               [ 1]  940 	ld	(x), a
      0003F3 5C               [ 2]  941 	incw	x
                                    942 ;	beep.c: 418: *addrss++ = _onOrOff[index];
      0003F4 16 0D            [ 2]  943 	ldw	y, (0x0d, sp)
      0003F6 72 F9 01         [ 2]  944 	addw	y, (0x01, sp)
      0003F9 90 F6            [ 1]  945 	ld	a, (y)
      0003FB F7               [ 1]  946 	ld	(x), a
      0003FC 5C               [ 2]  947 	incw	x
      0003FD 1F 03            [ 2]  948 	ldw	(0x03, sp), x
                                    949 ;	beep.c: 414: for (index = 0; index < numberOfValues; index++)
      0003FF 1E 01            [ 2]  950 	ldw	x, (0x01, sp)
      000401 5C               [ 2]  951 	incw	x
      000402 1F 01            [ 2]  952 	ldw	(0x01, sp), x
      000404 20 BD            [ 2]  953 	jra	00103$
      000406                        954 00105$:
      000406 5B 0E            [ 2]  955 	addw	sp, #14
      000408 81               [ 4]  956 	ret
                                    957 ;	beep.c: 462: int main () {
                                    958 ;	-----------------------------------------
                                    959 ;	 function main
                                    960 ;	-----------------------------------------
      000409                        961 _main:
      000409 52 33            [ 2]  962 	sub	sp, #51
                                    963 ;	beep.c: 466: u8 startmeting=0;	
      00040B 0F 11            [ 1]  964 	clr	(0x11, sp)
                                    965 ;	beep.c: 467: unsigned int val=0, current,periode;
      00040D 5F               [ 1]  966 	clrw	x
      00040E 1F 20            [ 2]  967 	ldw	(0x20, sp), x
                                    968 ;	beep.c: 469: InitializeSystemClock();
      000410 CDr00r08         [ 4]  969 	call	_InitializeSystemClock
                                    970 ;	beep.c: 486: SetDefaultValues();
      000413 CDr03r9C         [ 4]  971 	call	_SetDefaultValues
                                    972 ;	beep.c: 488: BEEP_CSR = (0<<7) | (0<<6) | (1<<5) | 0x1E;
      000416 AE 50 F3         [ 2]  973 	ldw	x, #0x50f3
      000419 A6 3E            [ 1]  974 	ld	a, #0x3e
      00041B F7               [ 1]  975 	ld	(x), a
                                    976 ;	beep.c: 489: PD_DDR = (1 << 3) | (1 << 2); // output mode
      00041C AE 50 11         [ 2]  977 	ldw	x, #0x5011
      00041F A6 0C            [ 1]  978 	ld	a, #0x0c
      000421 F7               [ 1]  979 	ld	(x), a
                                    980 ;	beep.c: 491: PD_DDR &=  ~(1 << 4); //PD4 input
      000422 AE 50 11         [ 2]  981 	ldw	x, #0x5011
      000425 F6               [ 1]  982 	ld	a, (x)
      000426 A4 EF            [ 1]  983 	and	a, #0xef
      000428 F7               [ 1]  984 	ld	(x), a
                                    985 ;	beep.c: 493: PD_CR1 = (1 << 3) | (1 << 2); // push-pull
      000429 AE 50 12         [ 2]  986 	ldw	x, #0x5012
      00042C A6 0C            [ 1]  987 	ld	a, #0x0c
      00042E F7               [ 1]  988 	ld	(x), a
                                    989 ;	beep.c: 494: PD_CR1 &= ~(1 << 4); // input with float
      00042F AE 50 12         [ 2]  990 	ldw	x, #0x5012
      000432 F6               [ 1]  991 	ld	a, (x)
      000433 A4 EF            [ 1]  992 	and	a, #0xef
      000435 F7               [ 1]  993 	ld	(x), a
                                    994 ;	beep.c: 495: PD_CR2 = (1 << 3) | (1 << 2) | (1<< 4); // up to 10MHz speed + interrupt enabled 
      000436 AE 50 13         [ 2]  995 	ldw	x, #0x5013
      000439 A6 1C            [ 1]  996 	ld	a, #0x1c
      00043B F7               [ 1]  997 	ld	(x), a
                                    998 ;	beep.c: 497: EXTI_CR1 = (1<<7); //Port D external sensitivity bits7:6 10: Falling edge only
      00043C AE 50 A0         [ 2]  999 	ldw	x, #0x50a0
      00043F A6 80            [ 1] 1000 	ld	a, #0x80
      000441 F7               [ 1] 1001 	ld	(x), a
                                   1002 ;	beep.c: 498: EXTI_CR1 &= ~(1<<6); //Port D external sensitivity bits7:6 10: Falling edge only
      000442 AE 50 A0         [ 2] 1003 	ldw	x, #0x50a0
      000445 F6               [ 1] 1004 	ld	a, (x)
      000446 A4 BF            [ 1] 1005 	and	a, #0xbf
      000448 F7               [ 1] 1006 	ld	(x), a
                                   1007 ;	beep.c: 501: tijd = &real_time;
      000449 AEr00r00         [ 2] 1008 	ldw	x, #_real_time+0
      00044C 1F 24            [ 2] 1009 	ldw	(0x24, sp), x
      00044E 7B 24            [ 1] 1010 	ld	a, (0x24, sp)
      000450 88               [ 1] 1011 	push	a
      000451 7B 26            [ 1] 1012 	ld	a, (0x26, sp)
      000453 6B 05            [ 1] 1013 	ld	(0x05, sp), a
      000455 84               [ 1] 1014 	pop	a
      000456 6B 03            [ 1] 1015 	ld	(0x03, sp), a
                                   1016 ;	beep.c: 506: tm1637Init();
      000458 CDr01rC7         [ 4] 1017 	call	_tm1637Init
                                   1018 ;	beep.c: 508: InitializeUART();
      00045B CDr01r4E         [ 4] 1019 	call	_InitializeUART
                                   1020 ;	beep.c: 512: __asm__("rim");
      00045E 9A               [ 1] 1021 	rim
                                   1022 ;	beep.c: 516: while (1) {
      00045F AE 00 01         [ 2] 1023 	ldw	x, #0x0001
      000462 1F 22            [ 2] 1024 	ldw	(0x22, sp), x
      000464                       1025 00112$:
                                   1026 ;	beep.c: 517: ADC_CR1 |= ADC_ADON; // ADC ON
      000464 72 10 54 01      [ 1] 1027 	bset	0x5401, #0
                                   1028 ;	beep.c: 518: ADC_CSR |= ((0x0F)&2); // select channel = 2 = PC4
      000468 AE 54 00         [ 2] 1029 	ldw	x, #0x5400
      00046B F6               [ 1] 1030 	ld	a, (x)
      00046C AA 02            [ 1] 1031 	or	a, #0x02
      00046E F7               [ 1] 1032 	ld	(x), a
                                   1033 ;	beep.c: 519: ADC_CR2 |= ADC_ALIGN; // Right Aligned Data
      00046F AE 54 02         [ 2] 1034 	ldw	x, #0x5402
      000472 F6               [ 1] 1035 	ld	a, (x)
      000473 AA 08            [ 1] 1036 	or	a, #0x08
      000475 F7               [ 1] 1037 	ld	(x), a
                                   1038 ;	beep.c: 520: ADC_CR1 |= ADC_ADON; // start conversion
      000476 72 10 54 01      [ 1] 1039 	bset	0x5401, #0
                                   1040 ;	beep.c: 521: while(((ADC_CSR)&(1<<7))== 0); // Wait till EOC
      00047A                       1041 00101$:
      00047A AE 54 00         [ 2] 1042 	ldw	x, #0x5400
      00047D F6               [ 1] 1043 	ld	a, (x)
      00047E 48               [ 1] 1044 	sll	a
      00047F 24 F9            [ 1] 1045 	jrnc	00101$
                                   1046 ;	beep.c: 523: val |= (unsigned int)ADC_DRL;
      000481 AE 54 05         [ 2] 1047 	ldw	x, #0x5405
      000484 F6               [ 1] 1048 	ld	a, (x)
      000485 5F               [ 1] 1049 	clrw	x
      000486 97               [ 1] 1050 	ld	xl, a
      000487 1A 21            [ 1] 1051 	or	a, (0x21, sp)
      000489 6B 1F            [ 1] 1052 	ld	(0x1f, sp), a
      00048B 9E               [ 1] 1053 	ld	a, xh
      00048C 1A 20            [ 1] 1054 	or	a, (0x20, sp)
      00048E 6B 01            [ 1] 1055 	ld	(0x01, sp), a
      000490 7B 1F            [ 1] 1056 	ld	a, (0x1f, sp)
      000492 6B 02            [ 1] 1057 	ld	(0x02, sp), a
                                   1058 ;	beep.c: 525: val |= (unsigned int)ADC_DRH<<8;
      000494 AE 54 04         [ 2] 1059 	ldw	x, #0x5404
      000497 F6               [ 1] 1060 	ld	a, (x)
      000498 5F               [ 1] 1061 	clrw	x
      000499 97               [ 1] 1062 	ld	xl, a
      00049A 58               [ 2] 1063 	sllw	x
      00049B 58               [ 2] 1064 	sllw	x
      00049C 58               [ 2] 1065 	sllw	x
      00049D 58               [ 2] 1066 	sllw	x
      00049E 58               [ 2] 1067 	sllw	x
      00049F 58               [ 2] 1068 	sllw	x
      0004A0 58               [ 2] 1069 	sllw	x
      0004A1 58               [ 2] 1070 	sllw	x
      0004A2 9F               [ 1] 1071 	ld	a, xl
      0004A3 1A 02            [ 1] 1072 	or	a, (0x02, sp)
      0004A5 6B 1D            [ 1] 1073 	ld	(0x1d, sp), a
      0004A7 9E               [ 1] 1074 	ld	a, xh
      0004A8 1A 01            [ 1] 1075 	or	a, (0x01, sp)
      0004AA 6B 20            [ 1] 1076 	ld	(0x20, sp), a
      0004AC 7B 1D            [ 1] 1077 	ld	a, (0x1d, sp)
      0004AE 6B 21            [ 1] 1078 	ld	(0x21, sp), a
                                   1079 ;	beep.c: 526: ADC_CR1 &= ~(1<<0); // ADC Stop Conversion
      0004B0 AE 54 01         [ 2] 1080 	ldw	x, #0x5401
      0004B3 F6               [ 1] 1081 	ld	a, (x)
      0004B4 A4 FE            [ 1] 1082 	and	a, #0xfe
      0004B6 F7               [ 1] 1083 	ld	(x), a
                                   1084 ;	beep.c: 527: current = val & 0x03ff;
      0004B7 7B 21            [ 1] 1085 	ld	a, (0x21, sp)
      0004B9 6B 10            [ 1] 1086 	ld	(0x10, sp), a
      0004BB 7B 20            [ 1] 1087 	ld	a, (0x20, sp)
      0004BD A4 03            [ 1] 1088 	and	a, #0x03
      0004BF 6B 0F            [ 1] 1089 	ld	(0x0f, sp), a
                                   1090 ;	beep.c: 533: starttijd.hour = real_time.hour;
      0004C1 1E 24            [ 2] 1091 	ldw	x, (0x24, sp)
      0004C3 5C               [ 2] 1092 	incw	x
      0004C4 5C               [ 2] 1093 	incw	x
      0004C5 1F 1A            [ 2] 1094 	ldw	(0x1a, sp), x
                                   1095 ;	beep.c: 534: starttijd.ticker = real_time.ticker;
      0004C7 1E 24            [ 2] 1096 	ldw	x, (0x24, sp)
      0004C9 1C 00 04         [ 2] 1097 	addw	x, #0x0004
      0004CC 1F 18            [ 2] 1098 	ldw	(0x18, sp), x
                                   1099 ;	beep.c: 529: if (current > MIN_CURRENT){ //start timing current consumption
      0004CE 1E 0F            [ 2] 1100 	ldw	x, (0x0f, sp)
      0004D0 A3 00 0A         [ 2] 1101 	cpw	x, #0x000a
      0004D3 23 3F            [ 2] 1102 	jrule	00105$
                                   1103 ;	beep.c: 531: starttijd.second = real_time.second;
      0004D5 96               [ 1] 1104 	ldw	x, sp
      0004D6 1C 00 05         [ 2] 1105 	addw	x, #5
      0004D9 16 24            [ 2] 1106 	ldw	y, (0x24, sp)
      0004DB 90 F6            [ 1] 1107 	ld	a, (y)
      0004DD F7               [ 1] 1108 	ld	(x), a
                                   1109 ;	beep.c: 532: starttijd.minute = real_time.minute;
      0004DE 96               [ 1] 1110 	ldw	x, sp
      0004DF 1C 00 05         [ 2] 1111 	addw	x, #5
      0004E2 1F 16            [ 2] 1112 	ldw	(0x16, sp), x
      0004E4 1E 16            [ 2] 1113 	ldw	x, (0x16, sp)
      0004E6 5C               [ 2] 1114 	incw	x
      0004E7 16 24            [ 2] 1115 	ldw	y, (0x24, sp)
      0004E9 90 E6 01         [ 1] 1116 	ld	a, (0x1, y)
      0004EC F7               [ 1] 1117 	ld	(x), a
                                   1118 ;	beep.c: 533: starttijd.hour = real_time.hour;
      0004ED 1E 16            [ 2] 1119 	ldw	x, (0x16, sp)
      0004EF 5C               [ 2] 1120 	incw	x
      0004F0 5C               [ 2] 1121 	incw	x
      0004F1 16 1A            [ 2] 1122 	ldw	y, (0x1a, sp)
      0004F3 90 F6            [ 1] 1123 	ld	a, (y)
      0004F5 F7               [ 1] 1124 	ld	(x), a
                                   1125 ;	beep.c: 534: starttijd.ticker = real_time.ticker;
      0004F6 1E 16            [ 2] 1126 	ldw	x, (0x16, sp)
      0004F8 1C 00 04         [ 2] 1127 	addw	x, #0x0004
      0004FB 16 18            [ 2] 1128 	ldw	y, (0x18, sp)
      0004FD 90 E6 03         [ 1] 1129 	ld	a, (0x3, y)
      000500 88               [ 1] 1130 	push	a
      000501 90 E6 02         [ 1] 1131 	ld	a, (0x2, y)
      000504 6B 15            [ 1] 1132 	ld	(0x15, sp), a
      000506 90 FE            [ 2] 1133 	ldw	y, (y)
      000508 84               [ 1] 1134 	pop	a
      000509 E7 03            [ 1] 1135 	ld	(0x3, x), a
      00050B 7B 14            [ 1] 1136 	ld	a, (0x14, sp)
      00050D E7 02            [ 1] 1137 	ld	(0x2, x), a
      00050F FF               [ 2] 1138 	ldw	(x), y
                                   1139 ;	beep.c: 535: startmeting = 1;
      000510 A6 01            [ 1] 1140 	ld	a, #0x01
      000512 6B 11            [ 1] 1141 	ld	(0x11, sp), a
      000514                       1142 00105$:
                                   1143 ;	beep.c: 537: if ((current < MIN_CURRENT) && (startmeting)) //stop timing current consumption
      000514 1E 0F            [ 2] 1144 	ldw	x, (0x0f, sp)
      000516 A3 00 0A         [ 2] 1145 	cpw	x, #0x000a
      000519 24 49            [ 1] 1146 	jrnc	00107$
      00051B 0D 11            [ 1] 1147 	tnz	(0x11, sp)
      00051D 27 45            [ 1] 1148 	jreq	00107$
                                   1149 ;	beep.c: 539: periode += real_time.ticker - starttijd.ticker; //periode in seconds that application draws current
      00051F 1E 18            [ 2] 1150 	ldw	x, (0x18, sp)
      000521 E6 03            [ 1] 1151 	ld	a, (0x3, x)
      000523 90 97            [ 1] 1152 	ld	yl, a
      000525 E6 02            [ 1] 1153 	ld	a, (0x2, x)
      000527 90 95            [ 1] 1154 	ld	yh, a
      000529 FE               [ 2] 1155 	ldw	x, (x)
      00052A 1F 30            [ 2] 1156 	ldw	(0x30, sp), x
      00052C 96               [ 1] 1157 	ldw	x, sp
      00052D 1C 00 09         [ 2] 1158 	addw	x, #9
      000530 E6 03            [ 1] 1159 	ld	a, (0x3, x)
      000532 6B 2F            [ 1] 1160 	ld	(0x2f, sp), a
      000534 E6 02            [ 1] 1161 	ld	a, (0x2, x)
      000536 6B 2E            [ 1] 1162 	ld	(0x2e, sp), a
      000538 FE               [ 2] 1163 	ldw	x, (x)
      000539 72 F2 2E         [ 2] 1164 	subw	y, (0x2e, sp)
      00053C 7B 31            [ 1] 1165 	ld	a, (0x31, sp)
      00053E 89               [ 2] 1166 	pushw	x
      00053F 12 02            [ 1] 1167 	sbc	a, (#2, sp)
      000541 85               [ 2] 1168 	popw	x
      000542 88               [ 1] 1169 	push	a
      000543 7B 31            [ 1] 1170 	ld	a, (0x31, sp)
      000545 89               [ 2] 1171 	pushw	x
      000546 12 01            [ 1] 1172 	sbc	a, (#1, sp)
      000548 85               [ 2] 1173 	popw	x
      000549 97               [ 1] 1174 	ld	xl, a
      00054A 7B 28            [ 1] 1175 	ld	a, (0x28, sp)
      00054C 6B 2C            [ 1] 1176 	ld	(0x2c, sp), a
      00054E 7B 27            [ 1] 1177 	ld	a, (0x27, sp)
      000550 6B 2B            [ 1] 1178 	ld	(0x2b, sp), a
      000552 84               [ 1] 1179 	pop	a
      000553 0F 29            [ 1] 1180 	clr	(0x29, sp)
      000555 0F 28            [ 1] 1181 	clr	(0x28, sp)
      000557 72 F9 2A         [ 2] 1182 	addw	y, (0x2a, sp)
      00055A 19 29            [ 1] 1183 	adc	a, (0x29, sp)
      00055C 95               [ 1] 1184 	ld	xh, a
      00055D 9F               [ 1] 1185 	ld	a, xl
      00055E 19 28            [ 1] 1186 	adc	a, (0x28, sp)
      000560 17 26            [ 2] 1187 	ldw	(0x26, sp), y
                                   1188 ;	beep.c: 540: startmeting = 0;
      000562 0F 11            [ 1] 1189 	clr	(0x11, sp)
      000564                       1190 00107$:
                                   1191 ;	beep.c: 542: if (real_time.hour == urenteller)
      000564 1E 1A            [ 2] 1192 	ldw	x, (0x1a, sp)
      000566 F6               [ 1] 1193 	ld	a, (x)
      000567 5F               [ 1] 1194 	clrw	x
      000568 97               [ 1] 1195 	ld	xl, a
      000569 13 22            [ 2] 1196 	cpw	x, (0x22, sp)
      00056B 26 08            [ 1] 1197 	jrne	00110$
                                   1198 ;	beep.c: 543: {       ++urenteller;
      00056D 1E 22            [ 2] 1199 	ldw	x, (0x22, sp)
      00056F 5C               [ 2] 1200 	incw	x
      000570 1F 22            [ 2] 1201 	ldw	(0x22, sp), x
                                   1202 ;	beep.c: 544: periode = 0;
      000572 5F               [ 1] 1203 	clrw	x
      000573 1F 26            [ 2] 1204 	ldw	(0x26, sp), x
      000575                       1205 00110$:
                                   1206 ;	beep.c: 550: tm1637DisplayDecimal(tijd->minute, 0); // display minutes 
      000575 1E 03            [ 2] 1207 	ldw	x, (0x03, sp)
      000577 E6 01            [ 1] 1208 	ld	a, (0x1, x)
      000579 5F               [ 1] 1209 	clrw	x
      00057A 89               [ 2] 1210 	pushw	x
      00057B 88               [ 1] 1211 	push	a
      00057C CDr01rCE         [ 4] 1212 	call	_tm1637DisplayDecimal
      00057F 5B 03            [ 2] 1213 	addw	sp, #3
      000581 CCr04r64         [ 2] 1214 	jp	00112$
      000584 5B 33            [ 2] 1215 	addw	sp, #51
      000586 81               [ 4] 1216 	ret
                                   1217 	.area CODE
      000587                       1218 _segmentMap:
      000587 3F                    1219 	.db #0x3F	;  63
      000588 06                    1220 	.db #0x06	;  6
      000589 5B                    1221 	.db #0x5B	;  91
      00058A 4F                    1222 	.db #0x4F	;  79	'O'
      00058B 66                    1223 	.db #0x66	;  102	'f'
      00058C 6D                    1224 	.db #0x6D	;  109	'm'
      00058D 7D                    1225 	.db #0x7D	;  125
      00058E 07                    1226 	.db #0x07	;  7
      00058F 7F                    1227 	.db #0x7F	;  127
      000590 6F                    1228 	.db #0x6F	;  111	'o'
      000591 77                    1229 	.db #0x77	;  119	'w'
      000592 7C                    1230 	.db #0x7C	;  124
      000593 39                    1231 	.db #0x39	;  57	'9'
      000594 5E                    1232 	.db #0x5E	;  94
      000595 79                    1233 	.db #0x79	;  121	'y'
      000596 71                    1234 	.db #0x71	;  113	'q'
      000597 00                    1235 	.db #0x00	;  0
                                   1236 	.area INITIALIZER
      000000                       1237 __xinit___pulseLength:
      000000 07 D0                 1238 	.dw #0x07D0
      000002 6C B6                 1239 	.dw #0x6CB6
      000004 01 90                 1240 	.dw #0x0190
      000006 06 2C                 1241 	.dw #0x062C
      000008 01 90                 1242 	.dw #0x0190
      00000A 0D FC                 1243 	.dw #0x0DFC
      00000C 01 90                 1244 	.dw #0x0190
      00000E                       1245 __xinit___onOrOff:
      00000E 01                    1246 	.db #0x01	; 1
      00000F 00                    1247 	.db #0x00	; 0
      000010 01                    1248 	.db #0x01	; 1
      000011 00                    1249 	.db #0x00	; 0
      000012 01                    1250 	.db #0x01	; 1
      000013 00                    1251 	.db #0x00	; 0
      000014 01                    1252 	.db #0x01	; 1
      000015                       1253 __xinit__numberOfValues:
      000015 07                    1254 	.db #0x07	;  7
                                   1255 	.area CABS (ABS)
